import bcrypt from "bcrypt";
import User from "../models/user.js";
import SOS from "../models/SOS.js";
import Contact from "../models/Contact.js";
import nodemailer from "nodemailer";
import dotenv from "dotenv";
import { io } from "../server.js";

dotenv.config();

const transporter = nodemailer.createTransport({
	service: "gmail",
	auth: {
		user: process.env.EMAIL_USER,
		pass: process.env.EMAIL_PASS,
	},
	tls: {
		rejectUnauthorized: false,
	},
});

async function sendEmail(user, receiver, message, coordinates) {
	await transporter.sendMail({
		from: process.env.EMAIL_USER,
		to: receiver.email,
		subject: "ðŸš¨ SOS Alert - Immediate Attention Needed!",
		html: `
		<!DOCTYPE html>
		<html lang="en">
		<head>
			<meta charset="UTF-8">
			<title>SOS Alert</title>
		</head>
		<body style="margin: 0; padding: 0; background-color: #fef2f2; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; color: #333;">
			<table width="100%" cellpadding="0" cellspacing="0" style="max-width: 600px; margin: 30px auto; background-color: #fff; border: 1px solid #f44336; border-radius: 8px; overflow: hidden;">
				<tr style="background-color: #f44336;">
					<td style="padding: 20px; text-align: center;">
						<h1 style="margin: 0; color: #fff;">ðŸš¨ SOS ALERT</h1>
						<p style="margin: 0; color: #ffeaea;">Emergency distress signal</p>
					</td>
				</tr>
				<tr>
					<td style="padding: 20px;">
						<p><strong>User Name:</strong> ${user.name}</p>
						<p><strong>Phone:</strong> ${user.phone}</p>
						<p><strong>Message:</strong><br>${message}</p>
						<p><strong>Coordinates:</strong><br>Latitude: ${coordinates.latitude}<br>Longitude: ${coordinates.longitude}</p>
						<div style="text-align: center; margin: 30px 0;">
							<a href="https://maps.google.com/?q=${coordinates.latitude},${coordinates.longitude}" 
								style="background-color: #f44336; color: white; padding: 12px 25px; text-decoration: none; font-weight: bold; border-radius: 6px;">
								View on Google Maps
							</a>
						</div>
						<hr style="border: none; border-top: 1px solid #eee;">
						<p style="font-size: 0.9em; color: #888;">This alert was automatically generated by the SOS system.</p>
					</td>
				</tr>
			</table>
		</body>
		</html>
	`,
	});
}

export const sendSilentSOS = async (req, res) => {
	try {
		const { userId, message, coordinates } = req.body;

		const user = await User.findById(userId).select("-password -__v");
		if (!user) return res.status(404).json({ message: "User not found" });

		const sos = new SOS({
			user: user._id,
			message,
			coordinates,
		});
		const newSOS = await sos.save();

		io.emit("newSOS", {
			message: message,
			user: user,
			location: coordinates,
			_id: newSOS._id,
			coordinates: coordinates,
			acceptedBy: [],
		});

		res.status(200).json({ message: "SOS sent successfully" });
	} catch (error) {
		console.log(error);
		res.status(500).json({ message: "Server error", error });
	}
};

export const sendSoftSOS = async (req, res) => {
	try {
		const { userId, message, coordinates, receiver } = req.body;

		const user = await User.findById(userId).select("-password -__v");
		if (!user) return res.status(404).json({ message: "User not found" });

		const sos = new SOS({
			user: user._id,
			message,
			coordinates,
			isContact: receiver === "contact",
		});
		const newSOS = await sos.save();

		if (receiver === "volunteer") {
			io.emit("newSOS", {
				message: message,
				user: user,
				location: coordinates,
				_id: newSOS._id,
				coordinates: coordinates,
				acceptedBy: [],
			});
			const allVolunteers = await User.find({
				role: "volunteer",
				volunteerStatus: "active",
			});
			if (!allVolunteers)
				return res.status(404).json({ message: "No volunteers found" });
			for (const volunteer of allVolunteers) {
				await sendEmail(user, volunteer, message, coordinates).catch(
					(error) => {
						console.error("Error sending email:", error);
					}
				);
			}
		} else if (receiver === "contact") {
			const myContacts = await Contact.findOne({ user: userId });
			if (!myContacts)
				return res.status(404).json({ message: "No contacts found" });

			for (const contact of myContacts.contacts) {
				await sendEmail(
					user,
					{ email: contact.user_email },
					message,
					coordinates
				).catch((error) => {
					console.error("Error sending email:", error);
				});
			}
		}
		res.status(200).json({ message: "SOS sent successfully" });
	} catch (error) {
		console.log(error);
		res.status(500).json({ message: "Server error", error });
	}
};

export const setAsResolved = async (req, res) => {
	const { sosId } = req.body;
	try {
		const sos = await SOS.findById(sosId);
		if (!sos) return res.status(404).json({ message: "SOS not found" });

		sos.isResolved = true;
		await sos.save();

		res.status(200).json({ message: "SOS marked as resolved" });
	} catch (error) {
		console.error(error);
		res.status(500).json({ message: "Server error", error });
	}
};

export const getAllNonResolvedSOS = async (req, res) => {
	try {
		const sosList = await SOS.find({
			isResolved: false,
			isContact: false,
		}).populate("user", "-password");
		if (!sosList) return res.status(404).json({ message: "No SOS found" });

		res.status(200).json(sosList);
	} catch (error) {
		console.error(error);
		res.status(500).json({ message: "Server error", error });
	}
};

export const getAllMySOS = async (req, res) => {
	try {
		const { myId } = req.body;
		const myUser = await User.findById(myId);
		if (!myUser) return res.status(404).json({ message: "User not found" });
		const sosList = await SOS.find({ user: myId }).populate(
			"user",
			"-password"
		);

		if (!sosList || sosList.length === 0) {
			return res.status(200).json([]);
		}

		res.status(200).json(sosList);
	} catch (error) {
		console.error(error);
		res.status(500).json({ message: "Server error", error });
	}
};

export const acceptSOS = async (req, res) => {
	try {
		const { sosId, userId } = req.body;

		const sos = await SOS.findById(sosId);
		if (!sos) return res.status(404).json({ message: "SOS not found" });

		const user = await User.findById(userId);
		if (!user) return res.status(404).json({ message: "User not found" });

		if (sos.acceptedBy.includes(userId)) {
			return res
				.status(400)
				.json({ message: "You have already accepted this SOS" });
		}

		sos.acceptedBy.push(userId);
		await sos.save();

		res.status(200).json({ message: "SOS accepted successfully", sos });
	} catch (error) {
		console.error(error);
		res.status(500).json({ message: "Server error", error });
	}
};
